{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "customers",
						"type": "DatasetReference"
					},
					"name": "customers"
				},
				{
					"dataset": {
						"referenceName": "transactions",
						"type": "DatasetReference"
					},
					"name": "transactions"
				},
				{
					"dataset": {
						"referenceName": "productInfo",
						"type": "DatasetReference"
					},
					"name": "Products"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "target",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Join1"
				},
				{
					"name": "Join2"
				},
				{
					"name": "Aggregate1"
				}
			],
			"script": "source(output(\n\t\tcustomer_Id as integer,\n\t\tDOB as date,\n\t\tGender as string,\n\t\tcity_code as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> customers\nsource(output(\n\t\ttransaction_id as long,\n\t\tcust_id as integer,\n\t\ttran_date as date,\n\t\tprod_subcat_code as short,\n\t\tprod_cat_code as short,\n\t\tQty as short,\n\t\tRate as short,\n\t\tTax as double,\n\t\ttotal_amt as double,\n\t\tStore_type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> transactions\nsource(output(\n\t\tprod_cat_code as short,\n\t\tprod_cat as string,\n\t\tprod_sub_cat_code as short,\n\t\tprod_subcat as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Products\ncustomers, transactions join(customer_Id == cust_id,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join1\nJoin1, Products join(transactions@prod_cat_code == Products@prod_cat_code\n\t&& prod_subcat_code == prod_sub_cat_code,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> Join2\nJoin2 aggregate(groupBy(prod_cat,\n\t\tStore_type),\n\ttotal_amt = sum(total_amt),\n\t\tQty = count(Qty)) ~> Aggregate1\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
		}
	}
}